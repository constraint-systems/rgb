{"version":3,"file":"static/webpack/static/development/pages/index.js.eba6576f8fee1de47893.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head'\nimport { useEffect, useState, useReducer, useRef } from 'react'\n\nlet p = 16\nlet pad = p / 2\nlet colkeys = {\n  ' ': [null, 0],\n  s: [0, 255],\n  d: [1, 255],\n  f: [2, 255],\n  w: [0, 122],\n  e: [1, 122],\n  r: [2, 122],\n}\n\nlet pcols = 3\nlet prows = 3\n\nlet key_order = '   wersdf'.split('')\n\nlet nrow1 = 'hjkl'.split('')\nlet nrow2 = '←↓↑→'.split('')\n\nfunction rgb(array) {\n  return 'rgb(' + array.join(',') + ')'\n}\n\nfunction px(num) {\n  return num * p\n}\nfunction o(num) {\n  return num + pad\n}\nfunction opx(num) {\n  return o(px(num))\n}\nfunction cx(canvas) {\n  return canvas.getContext('2d')\n}\n\nfunction Reducer(state, action) {\n  switch (action.type) {\n    case 'set_marker':\n      {\n        let _state = Object.assign({}, state)\n        _state.marker = action.payload\n        return _state\n      }\n      defaut: throw new Error()\n  }\n}\n\nlet dimensions = [40, 30]\n\nlet Space = () => <div style={{ width: p / 2 }} />\n\nlet Home = () => {\n  let marker_ref = useRef(null)\n  let [pmark, setPMark] = useState([0, 0])\n  let [show_grid, setShowGrid] = useState(false)\n  let [needle_drop, togNeedle] = useState(false)\n\n  let km_ref = useRef({})\n  let color_ref = useRef([0, 0, 0])\n  let spaceref = useRef(true)\n\n  let cref = useRef(null)\n  let gref = useRef(null)\n  let mref = useRef(null)\n\n  let pref = useRef(null)\n  let piref = useRef(null)\n  let pmref = useRef(null)\n  let ptextref = useRef(null)\n  let toggle_ref = useRef(spaceref.current)\n\n  let nref = useRef(null)\n\n  function drawGrid() {\n    let [cols, rows] = dimensions\n    let g = gref.current\n    let gx = cx(g)\n    gx.clearRect(0, 0, g.width, g.height)\n    if (show_grid) {\n      gx.strokeStyle = '#bbb'\n      gx.lineWidth = 1\n      for (let row = 0; row < rows; row++) {\n        for (let col = 0; col < cols; col++) {\n          gx.strokeRect(opx(col), opx(row), p, p)\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    drawGrid()\n  }, [show_grid])\n\n  function drawMarker() {\n    let [x, y, w, h] = state.marker\n    let m = mref.current\n    let mx = cx(m)\n    mx.clearRect(0, 0, m.width, m.height)\n    mx.lineWidth = 1\n    mx.strokeStyle = 'black'\n    mx.strokeRect(opx(x) - 1.5, opx(y) - 1.5, px(w) + 3, px(h) + 3)\n    mx.lineWidth = 2\n    mx.strokeStyle = 'cyan'\n    mx.strokeRect(opx(x) - 0, opx(y) - 0, px(w) + 0, px(h) + 0)\n  }\n\n  useEffect(() => {\n  }, [state.marker])\n\n  function drawPalette() {\n    let pc = pref.current\n    let pcx = cx(pc)\n\n    let blank = [0, 0, 0]\n    for (let i = 0; i < key_order.length; i++) {\n      let key = key_order[i]\n      let vals = colkeys[key]\n      let x = i % pcols\n      let y = Math.floor(i / pcols)\n      let color = blank.slice()\n      color[vals[0]] = vals[1]\n      pcx.fillStyle = rgb(color)\n      pcx.fillRect(px(x * 4), px(y * 2), p * 4, p * 2)\n    }\n  }\n\n  function drawPMark() {\n    let color = color_ref.current\n    let pm = pmref.current\n    let pmx = cx(pm)\n    pmx.fillStyle = rgb(color)\n    pmx.fillStyle = pmx.fillRect(0, 0, pm.width, pm.height)\n    if (spaceref.current) {\n      pmx.lineWidth = 2\n      pmx.strokeStyle = 'black'\n      pmx.strokeRect(0, 0, pm.width - 0, pm.height - 0)\n      pmx.strokeStyle = 'cyan'\n      pmx.strokeRect(2, 2, pm.width - 4, pm.height - 4)\n    }\n\n    toggle_ref.current.childNodes[2].innerHTML = spaceref.current ? 'on' : 'off'\n\n    let pi = piref.current\n    let pix = cx(pi)\n    pix.clearRect(0, 0, pi.width, pi.height)\n    for (let i = 0; i < key_order.length; i++) {\n      let key = key_order[i]\n      let vals = colkeys[key]\n      let check = color[vals[0] === null ? i : vals[0]] === vals[1]\n      if (check) {\n        let x = i % pcols\n        let y = Math.floor(i / pcols)\n        pix.strokeStyle = 'white'\n        pix.lineWidth = 1\n        pix.strokeRect(px(x * 4) + 0.5, px(y * 2) + 0.5, p * 4 - 1, p * 2 - 1)\n        pix.strokeStyle = 'black'\n        pix.lineWidth = 1\n        pix.strokeRect(px(x * 4) + 1.5, px(y * 2) + 1.5, p * 4 - 3, p * 2 - 3)\n      }\n    }\n\n    let ptext = ptextref.current\n    let children = ptext.childNodes\n    for (let i = 0; i < key_order.length; i++) {\n      children[i].innerHTML = key_order[i]\n    }\n    for (let c = 0; c < color.length; c++) {\n      let check = color[c]\n      if (check === 0) {\n        // first row\n        children[c].innerHTML = '0'\n      } else if (check === 122) {\n        // second row\n        children[c + 3].innerHTML = '122'\n      } else if (check === 255) {\n        // third row\n        children[c + 6].innerHTML = '255'\n      }\n    }\n  }\n\n  useEffect(() => {\n    let c = cref.current\n    c.width = px(cols) + pad * 2\n    c.height = px(rows) + pad * 2\n    let ctx = cx(c)\n    ctx.fillStyle = 'white'\n    ctx.fillRect(o(0), o(0), px(cols), px(rows))\n\n    let g = gref.current\n    g.width = px(cols) + pad * 2\n    g.height = px(rows) + pad * 2\n    drawGrid()\n\n    let m = mref.current\n    m.width = px(cols) + pad * 2\n    m.height = px(rows) + pad * 2\n    drawMarker()\n\n    let pc = pref.current\n    pc.width = px(3 * 4)\n    pc.height = px(3 * 2)\n    drawPalette()\n\n    let pi = piref.current\n    pi.width = px(3 * 4)\n    pi.height = px(3 * 2)\n    drawPalette()\n\n    let pm = pmref.current\n    pm.width = px(4 * 3 + 2)\n    pm.height = px(2 * 2)\n    drawPMark()\n\n    let n = nref.current\n    n.width = px(4 * 3)\n    n.height = px(2 * 2)\n    drawNav()\n\n    keyAction(null, null)\n  }, [])\n\n  function drawNav() {\n    let n = nref.current\n    let nx = cx(n)\n    nx.fillStyle = '#aaa'\n    nx.fillRect(0, 0, n.width, n.height)\n\n    let km = km_ref.current\n\n    function drawActive(x, y) {\n      nx.strokeStyle = 'white'\n      nx.strokeStyle = 'black'\n      nx.lineWidth = 2\n      nx.strokeRect(px(x * 3) + 1, px(y * 2) + 1, p * 3 - 2, p * 2 - 2)\n    }\n\n    if (km.h) {\n      drawActive(0, 0)\n    }\n    if (km.j) {\n      drawActive(1, 0)\n    }\n    if (km.k) {\n      drawActive(2, 0)\n    }\n    if (km.l) {\n      drawActive(3, 0)\n    }\n\n    if (km.arrowleft) {\n      drawActive(0, 1)\n    }\n    if (km.arrowdown) {\n      drawActive(1, 1)\n    }\n    if (km.arrowup) {\n      drawActive(2, 1)\n    }\n    if (km.arrowright) {\n      drawActive(3, 1)\n    }\n  }\n\n  function keyAction(key, e) {\n    let marker = marker_ref.current\n    let [cols, rows] = dimensions\n    let km = km_ref.current\n\n    let move = 1\n\n    if (key === 'g') {\n      setShowGrid(prev => !prev)\n    } else if (key === 'p') {\n      let link = document.createElement('a')\n\n      let c = cref.current\n      let temp = document.createElement('canvas')\n      temp.width = c.width - pad * 2\n      temp.height = c.height - pad * 2\n\n      let tempx = temp.getContext('2d')\n      tempx.fillStyle = 'white'\n      tempx.drawImage(c, -pad, -pad)\n\n      temp.toBlob(function(blob) {\n        link.setAttribute(\n          'download',\n          'rgb-' +\n            new Date()\n              .toISOString()\n              .slice(0, -4)\n              .replace(/-/g, '')\n              .replace(/:/g, '')\n              .replace(/_/g, '')\n              .replace(/\\./g, '') +\n            'Z' +\n            '.png'\n        )\n\n        link.setAttribute('href', URL.createObjectURL(blob))\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        )\n      })\n    }\n\n    drawNav()\n    let _marker = marker.slice()\n    if (km.h || km.arrowleft) {\n      if (marker[0] >= move) {\n        _marker[0] -= move\n      }\n    }\n    if (km.j || km.arrowdown) {\n      if (marker[1] + move <= rows - 1) {\n        _marker[1] += move\n      }\n    }\n    if (km.k || km.arrowup) {\n      if (marker[1] >= move) {\n        _marker[1] -= move\n      }\n    }\n    if (km.l || km.arrowright) {\n      if (marker[0] + move <= cols - 1) {\n        _marker[0] += move\n      }\n    }\n    marker_ref.current = _marker\n\n    let r = 0\n    let g = 0\n    let b = 0\n    if (km.r) {\n      b = 122\n    }\n    if (km.e) {\n      g = 122\n    }\n    if (km.w) {\n      r = 122\n    }\n    if (km.f) {\n      b = 255\n    }\n    if (km.d) {\n      g = 255\n    }\n    if (km.s) {\n      r = 255\n    }\n    let color = [r, g, b]\n    color_ref.current = color\n\n    if ((key === 'Space' || key === 'Backspace') && !e.repeat) {\n      spaceref.current = !spaceref.current\n    }\n\n    drawMarker()\n\n    if (spaceref.current) {\n      let c = cref.current\n      let ctx = cx(c)\n\n      ctx.fillStyle = rgb(color)\n      ctx.fillRect(\n        ..._marker.slice(0, 2).map(v => opx(v)),\n        ..._marker.slice(2).map(v => px(v))\n      )\n    }\n\n    drawPMark()\n  }\n\n  function downHandler(e) {\n    km_ref.current[e.key.toLowerCase()] = true\n    keyAction(e.key, e)\n  }\n\n  function upHandler(e) {\n    km_ref.current[e.key.toLowerCase()] = false\n    let key = e.key.toLowerCase()\n    let key_check = key_order.slice()\n    key_check.push(' ')\n    key_check.push('backspace')\n    if (key_check.indexOf(key) !== -1) {\n      keyAction(null, e)\n    }\n    let nav_check = 'hjkl'.split('')\n    nav_check.push('arrowleft', 'arrowdown', 'arrowup', 'arrowright')\n    if (nav_check.indexOf(key) !== -1) {\n      keyAction(null, e)\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler)\n    window.addEventListener('keyup', upHandler)\n    return () => {\n      window.removeEventListener('keydown', downHandler)\n      window.removeEventListener('keyup', upHandler)\n    }\n  }, [pmark])\n\n  let [cols, rows] = state.dimensions\n\n  let title = 'Rgb'\n  let description = 'Pixel-paint using keyboard controls.'\n\n  return (\n    <div>\n      <Head>\n        <meta charset=\"UTF-8\" />\n        <title>Rgb</title>\n        <link rel=\"shortcut icon\" href=\"/favicon.png\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width,initial-scale=1,shrink-to-fit=no\"\n        />\n        <meta name=\"theme-color\" content=\"#000000\" />\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta\n          property=\"og:image\"\n          content=\"https://rgb.constraint.systems/rgb.png\"\n        />\n        <meta property=\"og:url\" content=\"https://rgb.constraint.systems\" />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Head>\n\n      <div\n        style={{\n          width: px(40),\n          margin: '0 auto',\n          paddingTop: p / 2,\n          paddingBottom: p / 2,\n        }}\n      >\n        <div style={{ paddingLeft: p / 2, paddingRight: p / 2 }}>\n          <div\n            style={{\n              position: 'relative',\n              display: 'flex',\n              lineHeight: px(2) + 'px',\n              textAlign: 'center',\n            }}\n          >\n            <div style={{ width: px(2), background: '#bbb' }}>g</div>\n            <Space />\n            <div>{show_grid ? 'hide' : 'show'} grid</div>\n            <Space />\n            <Space />\n            <div style={{ width: px(2), background: '#bbb' }}>p</div>\n            <Space />\n            <div>save image as png</div>\n          </div>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <canvas ref={cref} />\n          <canvas\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n            }}\n            ref={gref}\n          />\n          <canvas\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n            }}\n            ref={mref}\n          />\n        </div>\n        <div style={{ paddingLeft: pad, paddingRight: pad, display: 'none' }}>\n          {cols}x{rows}: {state.marker.slice(0, 2).join(',')}{' '}\n          {state.marker.slice(2).join('x')}\n        </div>\n        <div style={{ padding: p / 2, display: 'flex', marginTop: -p / 2 }}>\n          <div style={{ position: 'relative', lineHeight: 0, marginRight: p }}>\n            <canvas ref={pref} />\n            <canvas\n              ref={piref}\n              style={{ position: 'absolute', left: 0, top: 0 }}\n            />\n            <div\n              ref={ptextref}\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                width: px(3 * 4),\n                height: px(3 * 2),\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr 1fr',\n                gridTemplateRows: '1fr 1fr 1fr',\n                textAlign: 'center',\n                color: 'white',\n                lineHeight: px(2) + 'px',\n              }}\n            >\n              {key_order.map(k => (\n                <div key={k}>{k}</div>\n              ))}\n            </div>\n          </div>\n          <div>\n            <div\n              ref={toggle_ref}\n              style={{\n                width: px(14),\n                display: 'flex',\n                lineHeight: px(2) + 'px',\n              }}\n            >\n              <div>Draw toggle:</div>\n              <Space />\n              <div></div>\n            </div>\n            <div\n              style={{ position: 'relative', lineHeight: 0, marginRight: p }}\n            >\n              <canvas ref={pmref} />\n              <div\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  width: '100%',\n                  height: '100%',\n                  lineHeight: px(2 * 2) + 'px',\n                  color: 'black',\n                  webkitTextStroke: '2px black',\n                  textAlign: 'center',\n                }}\n              >\n                Space\n              </div>\n              <div\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  width: '100%',\n                  height: '100%',\n                  lineHeight: px(2 * 2) + 'px',\n                  color: 'white',\n                  textAlign: 'center',\n                }}\n              >\n                Space\n              </div>\n            </div>\n          </div>\n          <div>\n            <div style={{ lineHeight: px(2) + 'px' }}>Navigation</div>\n            <div style={{ position: 'relative', lineHeight: 0 }}>\n              <canvas ref={nref} />\n              <div\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  width: px(4 * 3),\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr 1fr 1fr',\n                  gridTemplateRows: '1fr 1fr',\n                  textAlign: 'center',\n                  lineHeight: px(2) + 'px',\n                }}\n              >\n                {nrow1.map(l => (\n                  <div>{l}</div>\n                ))}\n                {nrow2.map(l => (\n                  <div>{l}</div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Regular.woff') format('woff');\n        }\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Italic.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Italic.woff') format('woff');\n          font-style: italic;\n        }\n        html,\n        body {\n          padding: 0;\n          margin: 0;\n          font-family: 'custom', monospace;\n        }\n        body {\n          background: #ddd;\n        }\n        * {\n          box-sizing: border-box;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default Home\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAcrWA;AAAA;AAAA;AACA;AAugBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAxKA;AAAA;AAAA;AA4MA;AACA;AACA;;;;A","sourceRoot":""}